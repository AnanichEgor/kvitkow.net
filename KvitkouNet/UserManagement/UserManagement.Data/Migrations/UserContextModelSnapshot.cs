// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserManagement.Data.Context;

namespace UserManagement.Data.Migrations
{
    [DbContext(typeof(UserContext))]
    partial class UserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("UserManagement.Logic.Common.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Flat");

                    b.Property<string>("House");

                    b.Property<string>("ProfileId");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.PhoneNumber", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Number");

                    b.Property<string>("ProfileId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.Profile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsBlocked");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<double>("Rating");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("Sex");

                    b.Property<string>("UserSettingsId");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingsId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.Security.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GroupId");

                    b.Property<string>("Name");

                    b.Property<string>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.Tickets.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalData");

                    b.Property<string>("EventLink");

                    b.Property<bool>("Free");

                    b.Property<string>("LocationEventId");

                    b.Property<string>("Name");

                    b.Property<string>("PaymentSystems");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProfileId");

                    b.Property<string>("SellerAdressId");

                    b.Property<string>("SellerPhone");

                    b.Property<int>("Status");

                    b.Property<string>("TimeActual");

                    b.Property<int>("TypeEvent");

                    b.Property<string>("UserId");

                    b.HasKey("TicketId");

                    b.HasIndex("LocationEventId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SellerAdressId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountId");

                    b.Property<int?>("GroupId");

                    b.Property<string>("ProfileId");

                    b.Property<string>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TicketId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.UserSettings.ProfileSettings", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsChangePassword");

                    b.Property<bool>("IsGetTicketInfo");

                    b.Property<bool>("IsPrivateAccount");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.Property<string>("MiddleName");

                    b.Property<string>("PreferAddress");

                    b.Property<string>("PreferPlace");

                    b.Property<string>("PreferRegion");

                    b.Property<byte[]>("UserImage");

                    b.HasKey("Id");

                    b.ToTable("ProfileSettings");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.Address", b =>
                {
                    b.HasOne("UserManagement.Logic.Common.Models.Profile")
                        .WithMany("Adresses")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.Group", b =>
                {
                    b.HasOne("UserManagement.Logic.Common.Models.Profile")
                        .WithMany("UserGroups")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.PhoneNumber", b =>
                {
                    b.HasOne("UserManagement.Logic.Common.Models.Profile")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.Profile", b =>
                {
                    b.HasOne("UserManagement.Logic.Common.Models.UserSettings.ProfileSettings", "UserSettings")
                        .WithMany()
                        .HasForeignKey("UserSettingsId");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.Security.Role", b =>
                {
                    b.HasOne("UserManagement.Logic.Common.Models.Group")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupId");

                    b.HasOne("UserManagement.Logic.Common.Models.Profile")
                        .WithMany("UserRoles")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.Tickets.Ticket", b =>
                {
                    b.HasOne("UserManagement.Logic.Common.Models.Address", "LocationEvent")
                        .WithMany()
                        .HasForeignKey("LocationEventId");

                    b.HasOne("UserManagement.Logic.Common.Models.Profile")
                        .WithMany("Tickets")
                        .HasForeignKey("ProfileId");

                    b.HasOne("UserManagement.Logic.Common.Models.Address", "SellerAdress")
                        .WithMany()
                        .HasForeignKey("SellerAdressId");

                    b.HasOne("UserManagement.Logic.Common.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("UserManagement.Logic.Common.Models.User", b =>
                {
                    b.HasOne("UserManagement.Logic.Common.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("UserManagement.Logic.Common.Models.Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId");

                    b.HasOne("UserManagement.Logic.Common.Models.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.HasOne("UserManagement.Logic.Common.Models.Tickets.Ticket")
                        .WithMany("RespondedUsers")
                        .HasForeignKey("TicketId");
                });
#pragma warning restore 612, 618
        }
    }
}
