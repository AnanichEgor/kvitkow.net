// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserManagement.Data.Context;

namespace UserManagement.Data.Migrations
{
    [DbContext(typeof(UserContext))]
    partial class UserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("UserManagement.Data.DbModels.AccountDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<string>("UserDBId");

                    b.HasKey("Id");

                    b.HasIndex("UserDBId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.AddressDB", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Flat");

                    b.Property<string>("House");

                    b.Property<int?>("ProfileId");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.GroupDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.PhoneNumberDB", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Number");

                    b.Property<int?>("ProfileId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.ProfileDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsBlocked");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("ProfileSettingsId");

                    b.Property<double>("Rating");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int>("Sex");

                    b.Property<string>("UserDBId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileSettingsId");

                    b.HasIndex("UserDBId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.Security.RoleDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GroupDBId");

                    b.Property<string>("Name");

                    b.Property<string>("UserDBId");

                    b.HasKey("Id");

                    b.HasIndex("GroupDBId");

                    b.HasIndex("UserDBId");

                    b.ToTable("RoleDB");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.Tickets.TicketDB", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Free");

                    b.Property<string>("Name");

                    b.Property<string>("TicketId");

                    b.Property<string>("UserDBId");

                    b.HasKey("Id");

                    b.HasIndex("UserDBId");

                    b.ToTable("TicketDB");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.UserDB", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.UserGroupDB", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<string>("UserId");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupDB");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.UserSettings.ProfileSettings", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsChangePassword");

                    b.Property<bool>("IsGetTicketInfo");

                    b.Property<bool>("IsPrivateAccount");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.Property<string>("MiddleName");

                    b.Property<string>("PreferAddress");

                    b.Property<string>("PreferPlace");

                    b.Property<string>("PreferRegion");

                    b.Property<byte[]>("UserImage");

                    b.HasKey("Id");

                    b.ToTable("ProfileSettings");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.AccountDB", b =>
                {
                    b.HasOne("UserManagement.Data.DbModels.UserDB", "UserDB")
                        .WithOne("AccountDB")
                        .HasForeignKey("UserManagement.Data.DbModels.AccountDB", "UserDBId");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.AddressDB", b =>
                {
                    b.HasOne("UserManagement.Data.DbModels.ProfileDB", "Profile")
                        .WithMany("Addresses")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.PhoneNumberDB", b =>
                {
                    b.HasOne("UserManagement.Data.DbModels.ProfileDB", "Profile")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.ProfileDB", b =>
                {
                    b.HasOne("UserManagement.Data.DbModels.UserSettings.ProfileSettings", "ProfileSettings")
                        .WithMany()
                        .HasForeignKey("ProfileSettingsId");

                    b.HasOne("UserManagement.Data.DbModels.UserDB", "UserDB")
                        .WithOne("ProfileDB")
                        .HasForeignKey("UserManagement.Data.DbModels.ProfileDB", "UserDBId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.Security.RoleDB", b =>
                {
                    b.HasOne("UserManagement.Data.DbModels.GroupDB")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupDBId");

                    b.HasOne("UserManagement.Data.DbModels.UserDB")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserDBId");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.Tickets.TicketDB", b =>
                {
                    b.HasOne("UserManagement.Data.DbModels.UserDB", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserDBId");
                });

            modelBuilder.Entity("UserManagement.Data.DbModels.UserGroupDB", b =>
                {
                    b.HasOne("UserManagement.Data.DbModels.GroupDB", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserManagement.Data.DbModels.UserDB", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
