/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../../../models/security";
import * as Mappers from "../../../models/security/rightsMappers";
import * as Parameters from "../../../models/security/parameters";
import { SecurityContext } from "../securityContext";

/** Class representing a Rights. */
export class Rights {
  private readonly client: SecurityContext;

  /**
   * Create a Rights.
   * @param {SecurityContext} client Reference to the service client.
   */
  constructor(client: SecurityContext) {
    this.client = client;
  }

  /**
   * @param perPage
   * @param page
   * @param [options] The optional parameters
   * @returns Promise<Models.RightsGetRightsResponse>
   */
  getRights(perPage: number, page: number, options?: Models.RightsGetRightsOptionalParams): Promise<Models.RightsGetRightsResponse>;
  /**
   * @param perPage
   * @param page
   * @param callback The callback
   */
  getRights(perPage: number, page: number, callback: msRest.ServiceCallback<Models.AccessRight[]>): void;
  /**
   * @param perPage
   * @param page
   * @param options The optional parameters
   * @param callback The callback
   */
  getRights(perPage: number, page: number, options: Models.RightsGetRightsOptionalParams, callback: msRest.ServiceCallback<Models.AccessRight[]>): void;
  getRights(perPage: number, page: number, options?: Models.RightsGetRightsOptionalParams | msRest.ServiceCallback<Models.AccessRight[]>, callback?: msRest.ServiceCallback<Models.AccessRight[]>): Promise<Models.RightsGetRightsResponse> {
    return this.client.sendOperationRequest(
      {
        perPage,
        page,
        options
      },
      getRightsOperationSpec,
      callback) as Promise<Models.RightsGetRightsResponse>;
  }

  /**
   * @param rightNames
   * @param [options] The optional parameters
   * @returns Promise<Models.RightsAddRightsResponse>
   */
  addRights(rightNames: string[], options?: msRest.RequestOptionsBase): Promise<Models.RightsAddRightsResponse>;
  /**
   * @param rightNames
   * @param callback The callback
   */
  addRights(rightNames: string[], callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param rightNames
   * @param options The optional parameters
   * @param callback The callback
   */
  addRights(rightNames: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  addRights(rightNames: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.RightsAddRightsResponse> {
    return this.client.sendOperationRequest(
      {
        rightNames,
        options
      },
      addRightsOperationSpec,
      callback) as Promise<Models.RightsAddRightsResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.RightsDeleteRightResponse>
   */
  deleteRight(id: number, options?: msRest.RequestOptionsBase): Promise<Models.RightsDeleteRightResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  deleteRight(id: number, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRight(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  deleteRight(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.RightsDeleteRightResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteRightOperationSpec,
      callback) as Promise<Models.RightsDeleteRightResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getRightsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/security/rights/{per_page}/{page}",
  urlParameters: [
    Parameters.perPage,
    Parameters.page
  ],
  queryParameters: [
    Parameters.mask
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessRight"
            }
          }
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const addRightsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/security/rights",
  requestBody: {
    parameterPath: "rightNames",
    mapper: {
      required: true,
      nullable: false,
      serializedName: "rightNames",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "String"
          }
        }
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const deleteRightOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/security/right/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};
