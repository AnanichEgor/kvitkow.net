/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../../../models/security";
import * as Mappers from "../../../models/security/featureOperationsMappers";
import * as Parameters from "../../../models/security/parameters";
import { SecurityContext } from "../securityContext";

/** Class representing a FeatureOperations. */
export class FeatureOperations {
  private readonly client: SecurityContext;

  /**
   * Create a FeatureOperations.
   * @param {SecurityContext} client Reference to the service client.
   */
  constructor(client: SecurityContext) {
    this.client = client;
  }

  /**
   * @param perPage
   * @param page
   * @param [options] The optional parameters
   * @returns Promise<Models.FeatureGetFeaturesResponse>
   */
  getFeatures(perPage: number, page: number, options?: Models.FeatureGetFeaturesOptionalParams): Promise<Models.FeatureGetFeaturesResponse>;
  /**
   * @param perPage
   * @param page
   * @param callback The callback
   */
  getFeatures(perPage: number, page: number, callback: msRest.ServiceCallback<Models.Feature[]>): void;
  /**
   * @param perPage
   * @param page
   * @param options The optional parameters
   * @param callback The callback
   */
  getFeatures(perPage: number, page: number, options: Models.FeatureGetFeaturesOptionalParams, callback: msRest.ServiceCallback<Models.Feature[]>): void;
  getFeatures(perPage: number, page: number, options?: Models.FeatureGetFeaturesOptionalParams | msRest.ServiceCallback<Models.Feature[]>, callback?: msRest.ServiceCallback<Models.Feature[]>): Promise<Models.FeatureGetFeaturesResponse> {
    return this.client.sendOperationRequest(
      {
        perPage,
        page,
        options
      },
      getFeaturesOperationSpec,
      callback) as Promise<Models.FeatureGetFeaturesResponse>;
  }

  /**
   * @param featureName
   * @param [options] The optional parameters
   * @returns Promise<Models.FeatureAddFeatureResponse>
   */
  addFeature(featureName: string, options?: msRest.RequestOptionsBase): Promise<Models.FeatureAddFeatureResponse>;
  /**
   * @param featureName
   * @param callback The callback
   */
  addFeature(featureName: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param featureName
   * @param options The optional parameters
   * @param callback The callback
   */
  addFeature(featureName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  addFeature(featureName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.FeatureAddFeatureResponse> {
    return this.client.sendOperationRequest(
      {
        featureName,
        options
      },
      addFeatureOperationSpec,
      callback) as Promise<Models.FeatureAddFeatureResponse>;
  }

  /**
   * @param request
   * @param [options] The optional parameters
   * @returns Promise<Models.FeatureEditFeatureResponse>
   */
  editFeature(request: Models.EditFeatureRequest, options?: msRest.RequestOptionsBase): Promise<Models.FeatureEditFeatureResponse>;
  /**
   * @param request
   * @param callback The callback
   */
  editFeature(request: Models.EditFeatureRequest, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param request
   * @param options The optional parameters
   * @param callback The callback
   */
  editFeature(request: Models.EditFeatureRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  editFeature(request: Models.EditFeatureRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.FeatureEditFeatureResponse> {
    return this.client.sendOperationRequest(
      {
        request,
        options
      },
      editFeatureOperationSpec,
      callback) as Promise<Models.FeatureEditFeatureResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.FeatureDeleteFeatureResponse>
   */
  deleteFeature(id: number, options?: msRest.RequestOptionsBase): Promise<Models.FeatureDeleteFeatureResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  deleteFeature(id: number, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteFeature(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  deleteFeature(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.FeatureDeleteFeatureResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteFeatureOperationSpec,
      callback) as Promise<Models.FeatureDeleteFeatureResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getFeaturesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/security/features/{per_page}/{page}",
  urlParameters: [
    Parameters.perPage,
    Parameters.page
  ],
  queryParameters: [
    Parameters.mask
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Feature"
            }
          }
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const addFeatureOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/security/feature",
  requestBody: {
    parameterPath: "featureName",
    mapper: {
      required: true,
      nullable: false,
      serializedName: "featureName",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const editFeatureOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/security/feature",
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.EditFeatureRequest,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const deleteFeatureOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/security/feature/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};
