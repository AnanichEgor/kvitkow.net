/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from '@azure/ms-rest-js';
import * as Models from '../models/chat';
import * as Mappers from '../models/chat/mappers';
import * as Parameters from '../models/chat/parameters';
import * as operations from './operations';
import { ChatContext } from './chatContext';

class Chat extends ChatContext {
  // Operation groups
  room: operations.RoomOperations;

  /**
   * Initializes a new instance of the Chat class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.ChatOptions) {
    super(options);
    this.room = new operations.RoomOperations(this);
  }

  /**
   * @param uid
   * @param [options] The optional parameters
   * @returns Promise<Models.ChatGetUserSettingsResponse>
   */
  getUserSettings(uid: string, options?: msRest.RequestOptionsBase): Promise<Models.ChatGetUserSettingsResponse>;
  /**
   * @param uid
   * @param callback The callback
   */
  getUserSettings(uid: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param uid
   * @param options The optional parameters
   * @param callback The callback
   */
  getUserSettings(uid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getUserSettings(uid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ChatGetUserSettingsResponse> {
    return this.sendOperationRequest(
      {
        uid,
        options
      },
      getUserSettingsOperationSpec,
      callback) as Promise<Models.ChatGetUserSettingsResponse>;
  }

  /**
   * @param uid
   * @param settings
   * @param [options] The optional parameters
   * @returns Promise<Models.ChatEditUserSettingsResponse>
   */
  editUserSettings(uid: string, settings: Models.Settings, options?: msRest.RequestOptionsBase): Promise<Models.ChatEditUserSettingsResponse>;
  /**
   * @param uid
   * @param settings
   * @param callback The callback
   */
  editUserSettings(uid: string, settings: Models.Settings, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param uid
   * @param settings
   * @param options The optional parameters
   * @param callback The callback
   */
  editUserSettings(uid: string, settings: Models.Settings, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  editUserSettings(uid: string, settings: Models.Settings, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.ChatEditUserSettingsResponse> {
    return this.sendOperationRequest(
      {
        uid,
        settings,
        options
      },
      editUserSettingsOperationSpec,
      callback) as Promise<Models.ChatEditUserSettingsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getUserSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/chat/settings/{uid}",
  urlParameters: [
    Parameters.uid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Settings
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const editUserSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/chat/settings/{uid}",
  urlParameters: [
    Parameters.uid
  ],
  requestBody: {
    parameterPath: "settings",
    mapper: {
      ...Mappers.Settings,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

export {
  Chat,
  ChatContext,
  Models as ChatModels,
  Mappers as ChatMappers
};
export * from "./operations";
